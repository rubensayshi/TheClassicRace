-- load test base
TheClassicRace = require("testbase")

local FLOAT_NEAR = 0.00001

describe("table helpers", function()
    describe("reduce", function()
        it("can sum ints", function()
            assert.equals(TheClassicRace.table.reduce({ one = 1, two = 2, three = 3 }, function(v, carry)
                return carry + v
            end), 6)
        end)
        it("can sum ints with base", function()
            assert.equals(TheClassicRace.table.reduce({ one = 1, two = 2, three = 3 }, function(v, carry)
                return carry + v
            end, 1), 7)
        end)
        it("can sum objects", function()
            assert.equals(TheClassicRace.table.reduce({ one = { score = 1 }, two = { score = 2 }, three = { score = 3 } }, function(v, carry)
                return carry + v["score"]
            end, 1), 7)
        end)
    end)

    describe("sum", function()
        it("can sum ints", function()
            assert.equals(TheClassicRace.table.sum({ one = 1, two = 2, three = 3 }), 6)
        end)
        it("can sum floats", function()
            assert.near(TheClassicRace.table.sum({ one = 1.1, two = 2.2, three = 3.3 }), 6.6, FLOAT_NEAR)
        end)
    end)

    describe("cnt", function()
        it("can cnt ints", function()
            assert.equals(TheClassicRace.table.cnt({ one = 1, two = 2, three = 3 }), 3)
            assert.equals(TheClassicRace.table.cnt({ one = 3, two = 2, three = 1 }), 3)
            assert.equals(TheClassicRace.table.cnt({ one = 1, two = 3, three = 2 }), 3)
            assert.equals(TheClassicRace.table.cnt({ one = 2, two = 3, three = 1 }), 3)
        end)
        it("can cnt floats", function()
            assert.equals(TheClassicRace.table.cnt({ one = 3.3, two = 3.3, three = 2.4 }), 3)
        end)
    end)

    describe("avg", function()
        it("can avg ints", function()
            assert.equals(TheClassicRace.table.avg({ one = 1, two = 2, three = 3 }), 2)
            assert.equals(TheClassicRace.table.avg({ one = 3, two = 2, three = 1 }), 2)
            assert.equals(TheClassicRace.table.avg({ one = 1, two = 3, three = 2 }), 2)
            assert.equals(TheClassicRace.table.avg({ one = 2, two = 3, three = 1 }), 2)
        end)
        it("can avg floats", function()
            assert.equals(TheClassicRace.table.cnt({ one = 3.3, two = 3.3, three = 2.4 }), 3)
            assert.near(TheClassicRace.table.sum({ one = 3.3, two = 3.3, three = 2.4 }), 9.0, FLOAT_NEAR)
            assert.near(TheClassicRace.table.avg({ one = 3.3, two = 3.3, three = 2.4 }), 3.0, FLOAT_NEAR)
        end)
    end)

    describe("min", function()
        it("can min ints", function()
            assert.equals(TheClassicRace.table.min({ one = 1, two = 2, three = 3 }), 1)
            assert.equals(TheClassicRace.table.min({ one = 3, two = 2, three = 1 }), 1)
            assert.equals(TheClassicRace.table.min({ one = 1, two = 3, three = 2 }), 1)
            assert.equals(TheClassicRace.table.min({ one = 2, two = 3, three = 1 }), 1)
        end)
        it("can min floats", function()
            assert.near(TheClassicRace.table.min({ one = 1.1, two = 2.2, three = 3.3 }), 1.1, FLOAT_NEAR)
            assert.near(TheClassicRace.table.min({ one = 3.3, two = 2.2, three = 1.1 }), 1.1, FLOAT_NEAR)
            assert.near(TheClassicRace.table.min({ one = 1.1, two = 3.3, three = 2.2 }), 1.1, FLOAT_NEAR)
            assert.near(TheClassicRace.table.min({ one = 2.2, two = 3.3, three = 1.1 }), 1.1, FLOAT_NEAR)
        end)
    end)

    describe("max", function()
        it("can max ints", function()
            assert.equals(TheClassicRace.table.max({ one = 1, two = 2, three = 3 }), 3)
            assert.equals(TheClassicRace.table.max({ one = 3, two = 2, three = 1 }), 3)
            assert.equals(TheClassicRace.table.max({ one = 1, two = 3, three = 2 }), 3)
            assert.equals(TheClassicRace.table.max({ one = 2, two = 3, three = 1 }), 3)
        end)
        it("can max floats", function()
            assert.near(TheClassicRace.table.max({ one = 1.1, two = 2.2, three = 3.3 }), 3.3, FLOAT_NEAR)
            assert.near(TheClassicRace.table.max({ one = 3.3, two = 2.2, three = 1.1 }), 3.3, FLOAT_NEAR)
            assert.near(TheClassicRace.table.max({ one = 1.1, two = 3.3, three = 2.2 }), 3.3, FLOAT_NEAR)
            assert.near(TheClassicRace.table.max({ one = 2.2, two = 3.3, three = 1.1 }), 3.3, FLOAT_NEAR)
        end)
    end)

    describe("cntsumminmax", function()
        it("can cntsumminmax ints", function()
            local cnt, sum, min, max = TheClassicRace.table.cntsumminmax({ one = 1, two = 2, three = 3 })
            assert.equals(cnt, 3)
            assert.equals(sum, 6)
            assert.equals(min, 1)
            assert.equals(max, 3)
            local cnt, sum, min, max = TheClassicRace.table.cntsumminmax({ one = 3, two = 2, three = 1 })
            assert.equals(cnt, 3)
            assert.equals(sum, 6)
            assert.equals(min, 1)
            assert.equals(max, 3)
            local cnt, sum, min, max = TheClassicRace.table.cntsumminmax({ one = 1, two = 3, three = 2 })
            assert.equals(cnt, 3)
            assert.equals(sum, 6)
            assert.equals(min, 1)
            assert.equals(max, 3)
            local cnt, sum, min, max = TheClassicRace.table.cntsumminmax({ one = 2, two = 3, three = 1 })
            assert.equals(cnt, 3)
            assert.equals(sum, 6)
            assert.equals(min, 1)
            assert.equals(max, 3)
        end)
    end)
end)
